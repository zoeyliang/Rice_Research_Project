function [ind_for_model, sum_sqrt_C_rho,global_min] = MFMC_model_selection_backtrack(rho, C)

[rho, order] = sort(rho, 'descend');
C = C(order);
K = length(rho);


global_min = Inf;
global_ind = [];
current_indices = 1;  % must contain the first element

backtrack(current_indices, sqrt(C(1)), 2);

ind_for_model = order(global_ind);
sum_sqrt_C_rho = sqrt(global_min);

    function backtrack(curr_indices, curr_xi, next_k)
        % % objective of current
        % curr_total = curr_xi;

        % update global min
        if curr_xi < global_min
            global_min = curr_xi;
            global_ind = curr_indices;
        end

        % termination
        if next_k > K
            return;
        end

        % 尝试扩展当前路径
        for k = next_k:K

            prev_idx = curr_indices(end);
            rho_prev = rho(prev_idx); %previous rho
            C_prev = C(prev_idx);

            rho_k = rho(k); %current rho
            C_k = C(k);

            if k == K
                rho_next = 0; %next rho
            else
                rho_next = rho(k+1);
            end

            % conditions to satisfy
            denominator = rho_k^2 - rho_next^2;
            if denominator <= 0 || (C_prev/C_k) <= (rho_prev^2 - rho_k^2)/denominator
                continue;
            end

            % update new objective
            rho_k_vec = [rho(curr_indices),rho_k];
            rho_k_vec_next = [rho(curr_indices(2:end)),rho_k,rho_next];
            C_k_vec = [C(curr_indices),C_k];
            xi = 1/C_k_vec(1)*(sum(sqrt(C_k_vec.*(rho_k_vec.^2 - rho_k_vec_next.^2))))^2;
            disp();
            disp(xi_star);

            % new_w_sq = xi;%curr_w_sq + sqrt(C_k * (rho_k^2 - rho_next^2));

            % pruning
            if xi >= global_min
                continue;
            end

            backtrack([curr_indices, k], xi, k+1);
        end
    end
end